// This file is part of SWGANH which is released under the MIT license.
// See file LICENSE or go to http://swganh.com/LICENSE

#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>

#include "anh/resource/resource_manager.h"

#include "object_template_reader.h"

using anh::resource::ResourceHandle;
using swganh::tre::readers::ObjectTemplateReader;
using swganh::tre::readers::DataParserMap;

typedef boost::iostreams::stream<boost::iostreams::array_source> ResourceStream;

BOOST_AUTO_TEST_SUITE(ObjectTemplateReaderTests)

BOOST_AUTO_TEST_CASE(CanReadObjectTemplate)
{
    unsigned char tmp[938] = {    
        0x46, 0x4f, 0x52, 0x4d, 0x00, 0x00, 0x03, 0xa2, 0x53, 0x48, 0x4f, 0x54, 0x46, 0x4f, 0x52, 0x4d, 
        0x00, 0x00, 0x03, 0x96, 0x30, 0x30, 0x30, 0x39, 0x50, 0x43, 0x4e, 0x54, 0x00, 0x00, 0x00, 0x04, 
        0x1b, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x23, 0x6f, 0x62, 0x6a, 0x65, 
        0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x01, 0x01, 0x6f, 0x62, 0x6a, 0x5f, 0x6e, 0x00, 0x01, 
        0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x58, 
        0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 
        0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x01, 0x01, 0x73, 0x74, 0x72, 
        0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x01, 0x00, 0x58, 
        0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x1f, 0x6c, 0x6f, 0x6f, 0x6b, 0x41, 0x74, 0x54, 0x65, 0x78, 
        0x74, 0x00, 0x01, 0x01, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x61, 
        0x62, 0x6c, 0x65, 0x00, 0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x10, 0x73, 0x6e, 
        0x61, 0x70, 0x54, 0x6f, 0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x00, 0x01, 0x00, 0x58, 0x58, 
        0x58, 0x58, 0x00, 0x00, 0x00, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 
        0x79, 0x70, 0x65, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 
        0x00, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 
        0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 
        0x58, 0x00, 0x00, 0x00, 0x0e, 0x74, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 
        0x00, 0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x19, 0x73, 0x6c, 0x6f, 0x74, 0x44, 
        0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 
        0x65, 0x00, 0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x20, 0x61, 0x72, 0x72, 0x61, 
        0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 
        0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 
        0x00, 0x00, 0x00, 0x15, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 
        0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 
        0x17, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c, 
        0x65, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x11, 
        0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x00, 0x01, 
        0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x1d, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 
        0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x00, 
        0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x21, 0x63, 0x6f, 
        0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 
        0x61, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 
        0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x22, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 
        0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x61, 
        0x67, 0x73, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 
        0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 
        0x46, 0x6c, 0x61, 0x67, 0x73, 0x00, 0x01, 0x20, 0x33, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 
        0x00, 0x00, 0x00, 0x1f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 
        0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x00, 0x01, 0x20, 0x01, 
        0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 
        0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 
        0x6c, 0x61, 0x67, 0x73, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 
        0x00, 0x00, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x00, 0x01, 0x20, 0x00, 0x00, 0x80, 0x3f, 0x58, 
        0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 
        0x74, 0x54, 0x79, 0x70, 0x65, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 
        0x00, 0x00, 0x00, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 
        0x00, 0x01, 0x01, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x25, 0x73, 0x63, 0x61, 0x6c, 0x65, 
        0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 
        0x78, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x3f, 
        0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x17, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x6f, 
        0x72, 0x61, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 
        0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x12, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 
        0x70, 0x65, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 
        0x14, 0x6e, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0x01, 
        0x20, 0x00, 0x00, 0x00, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x15, 0x6f, 0x6e, 0x6c, 
        0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x00, 
        0x01, 0x00, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 
        0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x64, 
        0x69, 0x75, 0x73, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00
    };
    
    auto data = std::make_shared<std::vector<char>>(sizeof(tmp));

    std::copy(tmp, tmp+sizeof(tmp), std::begin(*data));

    auto resource = std::make_shared<ResourceHandle>(nullptr, "object/object/base/shared_base_object.iff", data);

    DataParserMap map;
    map.insert(std::make_pair("scale", std::bind(&ObjectTemplateReader::ParseFloat, std::placeholders::_1, std::placeholders::_2)));

    ObjectTemplateReader reader(resource, map);

    BOOST_CHECK_EQUAL(1.0f, reader.GetValue<float>("scale"));
}

BOOST_AUTO_TEST_SUITE_END()
